msg-shedule:
  scheduler: # 调度组件
    # 线程池配置
    schedule-executor: # 定时调度用，每个表都对应一个task供定时调度，所以线程数最好不小于独立调度的表个数
      min-thread: 2 # 需要调度的表个数
      max-thread: 2 # 需要调度的表个数
    port-executor: # 执行中转(port函数)用。当调度器加载消息后，或者即时投递时，需要将具体的消息投递到对应的mq，担任了生产者发送消息的任务。所以线程数与对应的中转队列一致就好。
      min-thread: 2 # 抽象中转队列的个数
      max-thread: 2 # 抽象中转队列的个数
    checkpoint-executor:
      min-thread: 2 # 需要检查的表个数
      max-thread: 2 # 需要检查的表个数


    default-schedule-interval:
      checkpoint-interval: 30 # 默认不写30分钟维护一次，route中不写默认以此值为默认值
      load-interval: 30 # 默认不写30分钟维护一次，route中不写默认以此值为默认值


    route: # 表与调度组件关系。调度组件包含 MessageRepository、TransferQueue
      load-from-repository-api: true # 配置后，需要调度的表从 MessageRepository 实现类获取，tables中仅作为调度参数；当false时，调度的table对象从tables属性中获取，未指出的不调度。
      tables:
        delayMsgTableA: # 消息表名，仓储层将实现接口与此对应(不一定就是db表名，仅为了区分)
          checkpoint-interval: 15 # 15分钟维护一次
          load-interval: 30 # 30分钟调度一次；对于延时消息，预加载30分钟的内容或检查点到格式化时间的内容；对于事务消息，前置检查30分钟的消息或检查点到当前时间；
        txMsgTableB:
          checkpoint-interval: 15
          load-interval: 15
        msgTableC: # 不指定，就遵从默认配置。
        msgTableD:
  message-queue: # 配置平台实现
    rocketmq:
      name-server: "nameServer"
      producers:
        common-producer:
          # common topic，具体业务使用tags
          group: common-producer-group
          name-server: "nameServer"
          instance-name: "instance-name"